// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Persistence.Context;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521121950_seedItems")]
    partial class seedItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Domain.Models.Event.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("6d33fbf3-0627-4d2f-b383-dd6f03f6b480"),
                            City = "Stockholm",
                            Date = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Träffa andra hundägare för en gemensam promenad.",
                            Location = "Slottsparken",
                            Time = "08:00",
                            Title = "Morgonpromenad i parken",
                            Type = "hund"
                        },
                        new
                        {
                            EventId = new Guid("ac06e62e-808d-49f4-b655-69bc13ac6b8f"),
                            City = "Malmö",
                            Date = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ta med din katt och fika tillsammans med andra kattägare.",
                            Location = "Vasastan",
                            Time = "15:00",
                            Title = "Kattfika på innergården",
                            Type = "katt"
                        },
                        new
                        {
                            EventId = new Guid("2b979c9a-4a60-45a8-9534-ad6f01c2312b"),
                            City = "Göteborg",
                            Date = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lär dig grunderna i hundträning med en erfaren instruktör.",
                            Location = "Hundtorget",
                            Time = "10:00",
                            Title = "Hundträning för nybörjare",
                            Type = "hund"
                        },
                        new
                        {
                            EventId = new Guid("53eeb5d2-d197-42fe-b3b9-1e62cf4342b5"),
                            City = "Uppsala",
                            Date = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kom och titta på vackra katter från hela landet.",
                            Location = "Mässcentrum",
                            Time = "13:00",
                            Title = "Kattutställning",
                            Type = "katt"
                        },
                        new
                        {
                            EventId = new Guid("c3757654-8450-4352-886d-3690c1bc243c"),
                            City = "Lund",
                            Date = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ett socialt evenemang för både hund- och kattägare.",
                            Location = "Stadsparken",
                            Time = "16:00",
                            Title = "Hund & Katt-mingel",
                            Type = "blandat"
                        });
                });

            modelBuilder.Entity("backend.Domain.Models.Item.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AltImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = new Guid("b63ebf4c-b7a2-4e9c-852d-990d2bd2edfe"),
                            AltImage = "Hundbädd",
                            Date = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mjuk och bekväm hundbädd för mindre hundar. Vår valp växte ur den efter bara några veckor.",
                            Image = "images/dog-bed.png",
                            Location = "Linköping",
                            Title = "Hundbädd, knappt använd",
                            Type = "Skänkes",
                            Username = "Jonas"
                        },
                        new
                        {
                            ItemId = new Guid("e7d93e80-cd92-4abd-91cb-3e075e24310a"),
                            AltImage = "Kattbur",
                            Date = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Plastbur med metallgaller, godkänd för biltransport. Lätt att rengöra. Hämtas i Sundsvall.",
                            Image = "images/cat-carrier.png",
                            Location = "Sundsvall",
                            Title = "Transportbur för katt",
                            Type = "Skänkes",
                            Username = "Elin"
                        },
                        new
                        {
                            ItemId = new Guid("40552539-8c3e-4eb7-8e15-17be953996ff"),
                            AltImage = "Hundkoppel",
                            Date = new DateTime(2025, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ett robust reflexkoppel, perfekt för kvällspromenader. Passar medelstora hundar. Använt men i fint skick.",
                            Image = "images/dog-leash.png",
                            Location = "Örebro",
                            Title = "Reflexkoppel till hund",
                            Type = "Skänkes",
                            Username = "Mikael"
                        });
                });

            modelBuilder.Entity("backend.Domain.Models.User.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c98635e1-fd94-41b0-a0ea-71f09669e7f6"),
                            Email = "test1@test.se",
                            Password = "test1",
                            Username = "test1"
                        },
                        new
                        {
                            UserId = new Guid("a4466a9b-08e1-4e0f-a96d-bfb636632297"),
                            Email = "test2@test.se",
                            Password = "test2",
                            Username = "test2"
                        },
                        new
                        {
                            UserId = new Guid("10eaec2a-ec38-42e2-9a3a-1e8b4559bb52"),
                            Email = "test3@test.se",
                            Password = "test3",
                            Username = "test3"
                        },
                        new
                        {
                            UserId = new Guid("85c925bd-6f71-4849-82a9-021ba0d76416"),
                            Email = "test4@test.se",
                            Password = "test4",
                            Username = "test4"
                        },
                        new
                        {
                            UserId = new Guid("4868b4e0-6a24-4c70-ae51-c711f9c1e07d"),
                            Email = "test5@test.se",
                            Password = "test5",
                            Username = "test5"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
