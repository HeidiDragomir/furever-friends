// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Persistence.Context;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250519202604_SeedEvents")]
    partial class SeedEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Domain.Models.Event.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("94c62bf9-d4f9-4038-8703-f11470f791ce"),
                            City = "Stockholm",
                            Date = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Träffa andra hundägare för en gemensam promenad.",
                            Location = "Slottsparken",
                            Time = "08:00",
                            Title = "Morgonpromenad i parken",
                            Type = "hund"
                        },
                        new
                        {
                            EventId = new Guid("381721d3-30e9-4d37-a5c6-3857e3c7eee9"),
                            City = "Malmö",
                            Date = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ta med din katt och fika tillsammans med andra kattägare.",
                            Location = "Vasastan",
                            Time = "15:00",
                            Title = "Kattfika på innergården",
                            Type = "katt"
                        },
                        new
                        {
                            EventId = new Guid("239e5eae-e375-4c3d-aabe-f0e0155a08d4"),
                            City = "Göteborg",
                            Date = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lär dig grunderna i hundträning med en erfaren instruktör.",
                            Location = "Hundtorget",
                            Time = "10:00",
                            Title = "Hundträning för nybörjare",
                            Type = "hund"
                        },
                        new
                        {
                            EventId = new Guid("a03e1f67-dbb2-4f85-9521-021f6adc0fca"),
                            City = "Uppsala",
                            Date = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kom och titta på vackra katter från hela landet.",
                            Location = "Mässcentrum",
                            Time = "13:00",
                            Title = "Kattutställning",
                            Type = "katt"
                        },
                        new
                        {
                            EventId = new Guid("bdfac5f4-d23d-4670-949e-52119fa39833"),
                            City = "Lund",
                            Date = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ett socialt evenemang för både hund- och kattägare.",
                            Location = "Stadsparken",
                            Time = "16:00",
                            Title = "Hund & Katt-mingel",
                            Type = "blandat"
                        });
                });

            modelBuilder.Entity("backend.Domain.Models.User.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("933d78e1-c9bb-46e6-96db-cd52c52d8471"),
                            Email = "test1@test.se",
                            Password = "test1",
                            Username = "test1"
                        },
                        new
                        {
                            UserId = new Guid("be994d0d-4abd-4458-9695-60939ff64a53"),
                            Email = "test2@test.se",
                            Password = "test2",
                            Username = "test2"
                        },
                        new
                        {
                            UserId = new Guid("6ac04be7-0947-446f-8775-72f98bfafa60"),
                            Email = "test3@test.se",
                            Password = "test3",
                            Username = "test3"
                        },
                        new
                        {
                            UserId = new Guid("c3f6c9e5-df43-4e3d-a3e4-730ac2110946"),
                            Email = "test4@test.se",
                            Password = "test4",
                            Username = "test4"
                        },
                        new
                        {
                            UserId = new Guid("60bb5280-397e-47fc-be0d-9dcf0118621a"),
                            Email = "test5@test.se",
                            Password = "test5",
                            Username = "test5"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
